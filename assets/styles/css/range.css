/* 1. Wrapper for overall control and responsiveness */
.custom-range-wrapper {
  background: transparent;
  display: flex;
  flex-direction: column;
  align-items: center; /* Centers children horizontally */
  justify-content: center; /* Centers children vertically if there's extra space */
  width: 80vw; /* Responsive width: 80% of viewport width */
  min-height: 10vh; /* Ensure enough vertical space, especially for the label above */
  height: auto; /* Allow height to adjust based on content */
  margin: 0 auto;
  padding: 0px 0; /* Add some vertical padding for overall spacing */
  box-sizing: border-box; /* Include padding in the width/height calculation */
}

/* 2. Slider Container - acts as a positioning context and centers contents */
.custom-range-slider {
  position: relative; /* Essential for absolute positioning of the label */
  width: 100%; /* Occupy full width of its parent (.custom-range-wrapper) */
  /* min-height ensures there's always room for the label above the slider */
  /* Calculate: Label height (32px) + space between label & thumb (e.g., 5px) + thumb height (42px)
     However, thumb has margin-top: -20px, pulling it up.
     So, from track: label height (32) + thumb margin-top offset (20) = 52px of space needed above track. */
  min-height: 10vh; /* Provides ample space for the label and keeps layout consistent */
  display: flex; /* Use flexbox to easily center the range input */
  align-items: center; /* Vertically center the input if this container gets more height */
  justify-content: center; /* Horizontally center the input */
  /* Removed left/transform from here as we'll center the range input directly */
}

/* 3. The Range Input Itself - more width control and responsiveness */
.custom-range {
  width: 90%; /* Responsive width: 90% of its parent (.custom-range-slider) */
  max-width: 600px; /* Prevents the slider from becoming too wide on large screens */
  -webkit-appearance: none;
  background: transparent;
  /* Adjust margin for vertical spacing or let flexbox handle it */
  margin: 0; /* Reset default margins to let parent flexbox center it */
}

.custom-range:focus {
  outline: none;
}

.custom-range::-webkit-slider-runnable-track {
  width: 100%;
  height: 1px;
  background: #92e6f1;
}

.custom-range::-moz-range-track {
  width: 100%;
  height: 1px;
  background: #92e6f1;
}

.custom-range::-webkit-slider-thumb {
  -webkit-appearance: none;
  height: 42px;
  width: 22px;
  border-radius: 22px;
  background: #92e6f1;
  box-shadow: 0px 10px 10px rgba(0,0,0,0.25);
  margin-top: -20px; /* This is key for vertically positioning the thumb relative to the track */
  cursor: pointer;
}

.custom-range::-moz-range-thumb {
  height: 42px;
  width: 22px;
  border-radius: 22px;
  background: #92e6f1;
  box-shadow: 0px 10px 10px rgba(0,0,0,0.25);
  cursor: pointer;
}

/* 4. Circle Label - positioned exactly above the point */
.range-circle-label {
  position: absolute;
  /* Top calculation:
     The thumb's top edge is 20px above the track (due to margin-top: -20px).
     The label's height is 32px.
     To make the label's *bottom* align with the thumb's *top*:
     We need to move the label's *top* (32px down from its bottom) up by 20px (thumb offset) + 32px (label height) = 52px.
     The `top` property is relative to the *top edge* of its parent (.custom-range-slider).
     Since `.custom-range` is vertically centered within `.custom-range-slider` (due to flexbox),
     the track itself will be roughly in the middle. Let's assume the top of the input is roughly at 50%
     of the min-height of its parent for simple calculation, or a fixed value from the top.
     A fixed `top: 15px;` (trial and error based on the `min-height: 80px` of parent) will place the label
     visually above the thumb. For perfect alignment with *changing* thumb position, JavaScript is needed.
  */
  top: -15px; /* Adjust this value based on visual testing. This assumes the slider is roughly centered vertically within its parent */
  width: 32px;
  height: 32px;
  background: transparent;
  border-radius: 50%;
  border: 1px solid #92e6f1;
  color: #92e6f1;
  font-size: 12px;
  text-align: center;
  line-height: 1.2;
  padding-top: 7px;
  font-weight: normal;
  pointer-events: none; /* Allows clicks to pass through to the slider below */

  /* For horizontal centering:
     The `left` property of this label will need to be dynamically set by JavaScript
     to match the `left` position of the slider's thumb.
     `transform: translateX(-50%)` then perfectly centers the label over that `left` point.
     Without JavaScript, this label will stay at `left: 0;` (default) or a fixed position.
     We'll set a placeholder `left` for now, but emphasize the JS requirement.
  */
  left: 0; /* Placeholder: This will be dynamically updated by JavaScript */
  transform: translateX(-50%); /* Centers the label horizontally on its `left` point */
}

.range-circle-label::after {
  content: "s";
  display: block;
  font-size: 8px;
  letter-spacing: 0.07em;
  margin-top: -2px;
}

